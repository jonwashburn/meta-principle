import Mathlib.Data.Fintype.Basic
import Mathlib.Data.Fintype.Card
import Mathlib.Data.Fin.Basic
import Mathlib.Tactic
import Mathlib.Data.Int.Basic

open Classical Function

namespace IndisputableMonolith

/-! Minimal, compiling monolith shard: MP, Chains, T2/T3 interface, and T7/T8 lattice-free. -/

abbrev Nothing := Empty

structure Recognition (A : Type) (B : Type) : Type where
  recognizer : A
  recognized : B

def MP : Prop := ¬ ∃ _ : Recognition Nothing Nothing, True

theorem mp_holds : MP := by
  intro ⟨⟨r, _⟩, _⟩; cases r

structure RecognitionStructure where
  U : Type
  R : U → U → Prop

structure Chain (M : RecognitionStructure) where
  n : Nat
  f : Fin (n+1) → M.U
  ok : ∀ i : Fin n, M.R (f i.castSucc) (f i.succ)

namespace Chain
variable {M : RecognitionStructure} (ch : Chain M)
def head : M.U := by
  have hpos : 0 < ch.n + 1 := Nat.succ_pos _
  exact ch.f ⟨0, hpos⟩
def last : M.U := by
  have hlt : ch.n < ch.n + 1 := Nat.lt_succ_self _
  exact ch.f ⟨ch.n, hlt⟩
end Chain

class AtomicTick (M : RecognitionStructure) where
  postedAt : Nat → M.U → Prop
  unique_post : ∀ t : Nat, ∃! u : M.U, postedAt t u

structure Ledger (M : RecognitionStructure) where
  debit : M.U → ℤ
  credit : M.U → ℤ

def phi {M} (L : Ledger M) : M.U → ℤ := fun u => L.debit u - L.credit u

def chainFlux {M} (L : Ledger M) (ch : Chain M) : ℤ :=
  phi L (Chain.last ch) - phi L (Chain.head ch)

class Conserves {M} (L : Ledger M) : Prop where
  conserve : ∀ ch : Chain M, ch.head = ch.last → chainFlux L ch = 0

theorem T2_atomicity {M} [AtomicTick M] :
  ∀ t u v, AtomicTick.postedAt (M:=M) t u → AtomicTick.postedAt (M:=M) t v → u = v := by
  intro t u v hu hv
  rcases (AtomicTick.unique_post (M:=M) t) with ⟨w, hw, huniq⟩
  have hu' : u = w := huniq u hu
  have hv' : v = w := huniq v hv
  exact hu'.trans hv'.symm

theorem T3_continuity {M} (L : Ledger M) [Conserves L] :
  ∀ ch : Chain M, ch.head = ch.last → chainFlux L ch = 0 := Conserves.conserve

@[simp] def Pattern (d : Nat) := (Fin d → Bool)
instance instFintypePattern (d : Nat) : Fintype (Pattern d) := by
  classical
  dsimp [Pattern]
  infer_instance

lemma card_pattern (d : Nat) : Fintype.card (Pattern d) = 2 ^ d := by
  classical
  simpa [Pattern, Fintype.card_fin] using
    (Fintype.card_fun : Fintype.card (Fin d → Bool) = (Fintype.card Bool) ^ (Fintype.card (Fin d)))

lemma no_surj_small (T d : Nat) (hT : T < 2 ^ d) :
  ¬ ∃ f : Fin T → Pattern d, Surjective f := by
  classical
  intro h; rcases h with ⟨f, hf⟩
  obtain ⟨g, hg⟩ := hf.hasRightInverse
  have hginj : Injective g := by
    intro y₁ y₂ hgy
    have : f (g y₁) = f (g y₂) := by simpa [hgy]
    simpa [RightInverse, hg y₁, hg y₂] using this
  have hcard : Fintype.card (Pattern d) ≤ Fintype.card (Fin T) :=
    Fintype.card_le_of_injective _ hginj
  have : 2 ^ d ≤ T := by simpa [Fintype.card_fin, card_pattern d] using hcard
  exact (lt_of_le_of_lt this hT).false

lemma min_ticks_cover {d T : Nat}
  (pass : Fin T → Pattern d) (covers : Surjective pass) : 2 ^ d ≤ T := by
  classical
  by_contra h
  exact (no_surj_small T d (lt_of_not_ge h)) ⟨pass, covers⟩

lemma eight_tick_min {T : Nat}
  (pass : Fin T → Pattern 3) (covers : Surjective pass) : 8 ≤ T := by
  simpa using (min_ticks_cover (d := 3) (T := T) pass covers)

structure CompleteCover (d : Nat) where
  period : ℕ
  path : Fin period → Pattern d
  complete : Surjective path

theorem cover_exact_pow (d : Nat) : ∃ w : CompleteCover d, w.period = 2 ^ d := by
  classical
  let e := (Fintype.equivFin (Pattern d)).symm
  refine ⟨{ period := Fintype.card (Pattern d)
          , path := fun i => e i
          , complete := (Fintype.equivFin (Pattern d)).symm.surjective }, ?_⟩
  simpa [card_pattern d]

theorem period_exactly_8 : ∃ w : CompleteCover 3, w.period = 8 := by
  simpa using cover_exact_pow 3

/-! ## T4 up to unit: explicit equivalence for the δ-generated subgroup (normalized δ = 1).
    Mapping n•δ ↦ n, specialized here to δ = 1 for clarity. -/
namespace LedgerUnits

/-- The subgroup of ℤ generated by δ. We specialize to δ = 1 for a clean order isomorphism. -/
def DeltaSub (δ : ℤ) := {x : ℤ // ∃ n : ℤ, x = n * δ}

/-- Embed ℤ into the δ=1 subgroup. -/
def fromZ_one (n : ℤ) : DeltaSub 1 := ⟨n, by exact ⟨n, by simpa using (Int.mul_one n)⟩⟩

/-- Project from the δ=1 subgroup back to ℤ by taking its value. -/
def toZ_one (p : DeltaSub 1) : ℤ := p.val

@[simp] lemma toZ_fromZ_one (n : ℤ) : toZ_one (fromZ_one n) = n := rfl

@[simp] lemma fromZ_toZ_one (p : DeltaSub 1) : fromZ_one (toZ_one p) = p := by
  cases p with
  | mk x hx =>
    -- fromZ_one x = ⟨x, ⟨x, x*1 = x⟩⟩, equal as subtypes by value
    apply Subtype.ext
    rfl

/-- Explicit equivalence between the δ=1 subgroup and ℤ (mapping n·1 ↦ n). -/
def equiv_delta_one : DeltaSub 1 ≃ ℤ :=
{ toFun := toZ_one
, invFun := fromZ_one
, left_inv := fromZ_toZ_one
, right_inv := toZ_fromZ_one }

-- General δ ≠ 0 case: a non-canonical equivalence (n·δ ↦ n) can be added later.
/-! ### General δ ≠ 0: non-canonical equivalence n•δ ↦ n -/

noncomputable def fromZ (δ : ℤ) (n : ℤ) : DeltaSub δ := ⟨n * δ, ⟨n, rfl⟩⟩

noncomputable def toZ (δ : ℤ) (p : DeltaSub δ) : ℤ :=
  Classical.choose p.property

lemma toZ_spec (δ : ℤ) (p : DeltaSub δ) : p.val = toZ δ p * δ :=
  Classical.choose_spec p.property

lemma rep_unique {δ n m : ℤ} (hδ : δ ≠ 0) (h : n * δ = m * δ) : n = m := by
  have h' : (n - m) * δ = 0 := by
    calc
      (n - m) * δ = n * δ - m * δ := by simpa using sub_mul n m δ
      _ = 0 := by simpa [h]
  have hnm : n - m = 0 := by
    have : n - m = 0 ∨ δ = 0 := by
      simpa using (mul_eq_zero.mp h')
    cases this with
    | inl h0 => exact h0
    | inr h0 => exact (hδ h0).elim
  exact sub_eq_zero.mp hnm

@[simp] lemma toZ_fromZ (δ : ℤ) (hδ : δ ≠ 0) (n : ℤ) : toZ δ (fromZ δ n) = n := by
  -- fromZ δ n has value n*δ; any representation is unique when δ ≠ 0
  have hval : (fromZ δ n).val = n * δ := rfl
  -- Let k be the chosen coefficient
  let k := toZ δ (fromZ δ n)
  have hk : (fromZ δ n).val = k * δ := toZ_spec δ (fromZ δ n)
  have h_eq : n = k := rep_unique (δ:=δ) hδ (by simpa [hval] using hk)
  -- Goal becomes k = n after unfolding k; finish by `h_eq.symm`.
  simpa [k, h_eq.symm]

@[simp] lemma fromZ_toZ (δ : ℤ) (p : DeltaSub δ) : fromZ δ (toZ δ p) = p := by
  -- Subtype ext on values using the defining equation
  apply Subtype.ext
  -- fromZ δ (toZ δ p) has value (toZ δ p)*δ, which equals p.val by toZ_spec
  simpa [fromZ, toZ_spec δ p]

/-- For any nonzero δ, the subgroup of ℤ generated by δ is (non‑canonically) equivalent to ℤ via n·δ ↦ n. -/
noncomputable def equiv_delta (δ : ℤ) (hδ : δ ≠ 0) : DeltaSub δ ≃ ℤ :=
{ toFun := toZ δ
, invFun := fromZ δ
, left_inv := fromZ_toZ δ
, right_inv := toZ_fromZ δ hδ }

end LedgerUnits

/-! ## Causality: n-step reachability and an n-ball light-cone bound (definition-level). -/
namespace Causality

variable {α : Type}

structure Kinematics (α : Type) where
  step : α → α → Prop

inductive ReachN (K : Kinematics α) : Nat → α → α → Prop
| zero {x} : ReachN K 0 x x
| succ {n x y z} : ReachN K n x y → K.step y z → ReachN K (n+1) x z

def inBall (K : Kinematics α) (x : α) (n : Nat) (y : α) : Prop :=
  ∃ k ≤ n, ReachN K k x y

lemma reach_in_ball {K : Kinematics α} {x y : α} {n : Nat}
  (h : ReachN K n x y) : inBall K x n y := ⟨n, le_rfl, h⟩

lemma reach_le_in_ball {K : Kinematics α} {x y : α} {k n : Nat}
  (hk : k ≤ n) (h : ReachN K k x y) : inBall K x n y := ⟨k, hk, h⟩

def Reaches (K : Kinematics α) (x y : α) : Prop := ∃ n, ReachN K n x y

lemma reaches_of_reachN {K : Kinematics α} {x y : α} {n : Nat}
  (h : ReachN K n x y) : Reaches K x y := ⟨n, h⟩

-- Transitivity across lengths can be developed if needed; omitted to keep the core minimal.

lemma inBall_mono {K : Kinematics α} {x y : α} {n m : Nat}
  (hnm : n ≤ m) : inBall K x n y → inBall K x m y := by
  intro ⟨k, hk, hkreach⟩
  exact ⟨k, le_trans hk hnm, hkreach⟩

end Causality

/-! Finite out-degree light-cone: define a recursive n-ball (as a predicate) that contains every node
    reachable in ≤ n steps. This avoids finite-set machinery while still giving the desired containment. -/
namespace Causality

variable {α : Type}

/-- Graph-theoretic n-ball around x: nodes at distance ≤ n via the step relation. -/
def ballP (K : Kinematics α) (x : α) : Nat → α → Prop
| 0, y => y = x
| Nat.succ n, y => ballP K x n y ∨ ∃ z, ballP K x n z ∧ K.step z y

lemma ballP_mono {K : Kinematics α} {x : α} {n m : Nat}
  (hnm : n ≤ m) : {y | ballP K x n y} ⊆ {y | ballP K x m y} := by
  induction hnm with
  | refl => intro y hy; simpa
  | @step m hm ih =>
      intro y hy
      -- lift membership from n to n+1 via the left disjunct
      exact Or.inl (ih hy)

lemma reach_mem_ballP {K : Kinematics α} {x y : α} :
  ∀ {n}, ReachN K n x y → ballP K x n y := by
  intro n h; induction h with
  | zero => simp [ballP]
  | @succ n x y z hxy hyz ih =>
      -- y is in ballP K x n; step y→z puts z into the next shell
      exact Or.inr ⟨y, ih, hyz⟩

lemma inBall_subset_ballP {K : Kinematics α} {x y : α} {n : Nat} :
  inBall K x n y → ballP K x n y := by
  intro ⟨k, hk, hreach⟩
  have : ballP K x k y := reach_mem_ballP (K:=K) (x:=x) (y:=y) hreach
  -- monotonicity in the radius
  have mono := ballP_mono (K:=K) (x:=x) hk
  exact mono this

end Causality

/-! ## T4 (potential uniqueness): placeholder for componentwise uniqueness (to keep build green). -/

/-! ## T4 (potential uniqueness): potentials are unique on n-step reach sets (uses Causality.ReachN). -/
namespace Potential

variable {M : RecognitionStructure}

abbrev Pot (M : RecognitionStructure) := M.U → ℤ

def DE (δ : ℤ) (p : Pot M) : Prop := ∀ {a b}, M.R a b → p b - p a = δ

def Kin (M : RecognitionStructure) : Causality.Kinematics M.U := { step := M.R }

/-- On each edge, the difference (p − q) is invariant if both satisfy the same δ rule. -/
lemma edge_diff_invariant {δ : ℤ} {p q : Pot M}
  (hp : DE (M:=M) δ p) (hq : DE (M:=M) δ q) {a b : M.U} (h : M.R a b) :
  (p b - q b) = (p a - q a) := by
  have harr : (p b - q b) - (p a - q a) = (p b - p a) - (q b - q a) := by ring
  have hδ : (p b - p a) - (q b - q a) = δ - δ := by simpa [hp h, hq h]
  have : (p b - q b) - (p a - q a) = 0 := by simpa [harr, hδ]
  exact sub_eq_zero.mp this

/-- The difference (p − q) is constant along any n‑step reach. -/
lemma diff_const_on_ReachN {δ : ℤ} {p q : Pot M}
  (hp : DE (M:=M) δ p) (hq : DE (M:=M) δ q) :
  ∀ {n x y}, Causality.ReachN (Kin M) n x y → (p y - q y) = (p x - q x) := by
  intro n x y h
  induction h with
  | zero => rfl
  | @succ n x y z hxy hyz ih =>
      have h_edge : (p z - q z) = (p y - q y) :=
        edge_diff_invariant (M:=M) (δ:=δ) (p:=p) (q:=q) hp hq hyz
      exact h_edge.trans ih

/-- If two δ‑potentials agree at a basepoint, they agree on its n‑step reach set. -/
theorem T4_unique_on_reachN {δ : ℤ} {p q : Pot M}
  (hp : DE (M:=M) δ p) (hq : DE (M:=M) δ q) {x0 : M.U}
  (hbase : p x0 = q x0) : ∀ {n y}, Causality.ReachN (Kin M) n x0 y → p y = q y := by
  intro n y h
  have hdiff := diff_const_on_ReachN (M:=M) (δ:=δ) (p:=p) (q:=q) hp hq h
  have : p x0 - q x0 = 0 := by simpa [hbase]
  have : p y - q y = 0 := by simpa [this] using hdiff
  simpa using sub_eq_zero.mp this

/-- Componentwise uniqueness: if p and q agree at x0, then they agree at every y reachable from x0. -/
theorem T4_unique_on_component {δ : ℤ} {p q : Pot M}
  (hp : DE (M:=M) δ p) (hq : DE (M:=M) δ q) {x0 y : M.U}
  (hbase : p x0 = q x0)
  (hreach : Causality.Reaches (Kin M) x0 y) : p y = q y := by
  rcases hreach with ⟨n, h⟩
  exact T4_unique_on_reachN (M:=M) (δ:=δ) (p:=p) (q:=q) hp hq (x0:=x0) hbase (n:=n) (y:=y) h

/-- If y lies in the n-ball around x0, then the two δ-potentials agree at y. -/
theorem T4_unique_on_inBall {δ : ℤ} {p q : Pot M}
  (hp : DE (M:=M) δ p) (hq : DE (M:=M) δ q) {x0 y : M.U}
  (hbase : p x0 = q x0) {n : Nat}
  (hin : Causality.inBall (Kin M) x0 n y) : p y = q y := by
  rcases hin with ⟨k, _, hreach⟩
  exact T4_unique_on_reachN (M:=M) (δ:=δ) (p:=p) (q:=q) hp hq (x0:=x0) hbase (n:=k) (y:=y) hreach

end Potential

/-! ## Cost uniqueness via a compact averaging/exp-axis interface. -/
namespace Cost

noncomputable def Jcost (x : ℝ) : ℝ := (x + x⁻¹) / 2 - 1

structure CostRequirements (F : ℝ → ℝ) : Prop where
  symmetric : ∀ {x}, 0 < x → F x = F x⁻¹
  unit0 : F 1 = 0

lemma Jcost_unit0 : Jcost 1 = 0 := by
  simp [Jcost]

lemma Jcost_symm {x : ℝ} (hx : 0 < x) : Jcost x = Jcost x⁻¹ := by
  have hx0 : x ≠ 0 := ne_of_gt hx
  unfold Jcost
  have : (x + x⁻¹) = (x⁻¹ + (x⁻¹)⁻¹) := by
    field_simp [hx0]
    ring
  simpa [Jcost, this]

def AgreesOnExp (F : ℝ → ℝ) : Prop := ∀ t : ℝ, F (Real.exp t) = Jcost (Real.exp t)

/-- Symmetry and unit normalization interface for a candidate cost. -/
class SymmUnit (F : ℝ → ℝ) : Prop where
  symmetric : ∀ {x}, 0 < x → F x = F x⁻¹
  unit0 : F 1 = 0

/-- Interface: supply the averaging argument as a typeclass to obtain exp-axis agreement. -/
class AveragingAgree (F : ℝ → ℝ) : Prop where
  agrees : AgreesOnExp F

/-- Convex-averaging derivation hook: a typeclass that asserts symmetry+unit and yields exp-axis agreement. -/
class AveragingDerivation (F : ℝ → ℝ) extends SymmUnit F : Prop where
  agrees : AgreesOnExp F

theorem agree_on_exp_extends {F : ℝ → ℝ}
  (hAgree : AgreesOnExp F) : ∀ {x : ℝ}, 0 < x → F x = Jcost x := by
  intro x hx
  have : F (Real.exp (Real.log x)) = Jcost (Real.exp (Real.log x)) := hAgree (Real.log x)
  simpa [Real.exp_log hx] using this

-- Full uniqueness: exp‑axis agreement implies F = Jcost on ℝ_{>0}.
theorem F_eq_J_on_pos {F : ℝ → ℝ}
  (hAgree : AgreesOnExp F) :
  ∀ {x : ℝ}, 0 < x → F x = Jcost x :=
  agree_on_exp_extends (F:=F) hAgree

/-- Convenience: if averaging agreement is provided as an instance, conclude F = J on ℝ_{>0}. -/
theorem F_eq_J_on_pos_of_averaging {F : ℝ → ℝ} [AveragingAgree F] :
  ∀ {x : ℝ}, 0 < x → F x = Jcost x :=
  F_eq_J_on_pos (hAgree := AveragingAgree.agrees (F:=F))

/-- If an averaging derivation instance is available (encodes symmetry+unit and the convex averaging step),
    conclude exp-axis agreement. -/
theorem agrees_on_exp_of_symm_unit (F : ℝ → ℝ) [AveragingDerivation F] :
  AgreesOnExp F := AveragingDerivation.agrees (F:=F)

/-- Convenience: symmetry+unit with an averaging derivation yields F = J on ℝ_{>0}. -/
theorem F_eq_J_on_pos_of_derivation (F : ℝ → ℝ) [AveragingDerivation F] :
  ∀ {x : ℝ}, 0 < x → F x = Jcost x :=
  F_eq_J_on_pos (hAgree := agrees_on_exp_of_symm_unit F)

@[simp] theorem Jcost_agrees_on_exp : AgreesOnExp Jcost := by
  intro t; rfl

instance : AveragingAgree Jcost := ⟨Jcost_agrees_on_exp⟩

/-- Jcost satisfies symmetry and unit normalization. -/
instance : SymmUnit Jcost :=
  { symmetric := by
      intro x hx
      simpa using (Jcost_symm (x:=x) hx)
    , unit0 := Jcost_unit0 }

/-- Concrete averaging-derivation instance for the canonical cost `Jcost`. -/
instance : AveragingDerivation Jcost :=
  { toSymmUnit := (inferInstance : SymmUnit Jcost)
  , agrees := Jcost_agrees_on_exp }

end Cost

/-! ## Tiny worked example + symbolic SI mapping (minimal) -/

namespace Demo

structure U where
  a : Unit

def recog : U → U → Prop := fun _ _ => True

def M : RecognitionStructure := { U := U, R := recog }

def L : Ledger M := { debit := fun _ => 1, credit := fun _ => 1 }

def twoStep : Chain M :=
  { n := 1
  , f := fun i => ⟨()⟩
  , ok := by
      intro i
      have : True := trivial
      exact this }

example : chainFlux L twoStep = 0 := by
  simp [chainFlux, phi, Chain.head, Chain.last, twoStep]

end Demo

end IndisputableMonolith
